/***************************************************************************
 * Title:          SeqUtils.h 
 * Author:         Mark Chaisson
 * Created:        2007
 * Last modified:  11/24/2009
 *
 * Copyright (c) 2007-2008 The Regents of the University of California
 * All Rights Reserved
 * See file LICENSE for details.
 ***************************************************************************/
#ifndef _SEQUTILS_H_
#define _SEQUTILS_H_
#include "DNASequence.h"
#include "SeqUtils.h"
#include "utils.h"
#include <vector>
#include <cctype>

//static char comp_bin[256] ;
static char comp_bin[256] = {3, 2, 1, 0, 4, 5, 6, 7, 8, 9,   // 0
			     10,11,12,13,14,15,16,16,16,16,  // 10
			     16,16,16,16,16,16,16,16,16,16,  // 20
			     16,16,16,16,16,16,16,16,16,16,  // 30
			     16,16,16,16,16,16,16,16,16,16,  // 40
			     16,16,16,16,16,16,16,16,16,16,  // 50
			     16,16,16,16,16,16,16,16,16,16,  // 60
			     16,16,16,16,16,16,16,16,16,16,  // 70
			     16,16,16,16,16,16,16,16,16,16,  // 80
			     16,16,16,16,16,16,16,16,16,16,  // 90
			     16,16,16,16,16,16,16,16,16,16,  // 100
			     16,16,16,16,16,16,16,16,16,16,  // 110
			     16,16,16,16,16,16,16,16,16,16,  // 120
			     16,16,16,16,16,16,16,16,16,16,  // 130
			     16,16,16,16,16,16,16,16,16,16,  // 140
			     16,16,16,16,16,16,16,16,16,16,  // 150
			     16,16,16,16,16,16,16,16,16,16,  // 160
			     16,16,16,16,16,16,16,16,16,16,  // 170
			     16,16,16,16,16,16,16,16,16,16,  // 180
			     16,16,16,16,16,16,16,16,16,16,  // 190
			     16,16,16,16,16,16,16,16,16,16,  // 200
			     16,16,16,16,16,16,16,16,16,16,  // 210
			     16,16,16,16,16,16,16,16,16,16,  // 220
			     16,16,16,16,16,16,16,16,16,16,  // 230
			     16, 16, 16, 16, 246, 247, 244, 245, 250, 251, // 240
			     248, 249, 254, 255, 252, 253}; // 255

static char comp_ascii[256] = {0,0,0,0,0,0,0,0,0,0,  // 0
			       0,0,0,0,0,0,0,0,0,0,  // 10
			       0,0,0,0,0,0,0,0,0,0,  // 20
			       0,0,0,0,0,0,0,0,0,0,  // 30
			       0,0,0,0,0,0,0,0,0,0,  // 40
			       0,0,0,0,0,0,0,0,0,0,  // 50
			       0,0,0,0,0,84,0,71,0,0,  // 60 'A'->'T' 'C'->'G' 
			       0,67,0,0,0,0,0,0,0,0,  // 70
			       0,0,0,0,65,0,0,0,0,0,  // 80
			       0,0,0,0,0,0,0,116,0,103,  // 90
			       0,0,0,99,0,0,0,0,0,0,  // 100
			       0,0,0,0,0,0,97,0,0,0,  // 110
			       0,0,0,0,0,0,0,0,0,0,  // 120
			       0,0,0,0,0,0,0,0,0,0,  // 130
			       0,0,0,0,0,0,0,0,0,0,  // 140
			       0,0,0,0,0,0,0,0,0,0,  // 150
			       0,0,0,0,0,0,0,0,0,0,  // 160
			       0,0,0,0,0,0,0,0,0,0,  // 170
			       0,0,0,0,0,0,0,0,0,0,  // 180
			       0,0,0,0,0,0,0,0,0,0,  // 190
			       0,0,0,0,0,0,0,0,0,0,  // 200
			       0,0,0,0,0,0,0,0,0,0,  // 210
			       0,0,0,0,0,0,0,0,0,0,  // 220
			       0,0,0,0,0,0,0,0,0,0,  // 230
			       0,0,0,0,0,0,0,0,0,0,  // 240
			       0,0,0,0,0,0};         // 250

 

static char unmasked_nuc[256] = {0, 1, 2, 3, 'N', 'R', 'Y', 'W', 'S', 'M',     // 9	
			     'K', 'H', 'B', 'V', 'D', 'X', '\0','\0','\0','\0',    // 19	
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 29 
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 39 
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 49 
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 59 
			     '\0','\0','\0','\0','\0', 'A','\0', 'C','\0','\0',    // 69 
			     '\0', 'G', 'H','\0','\0', 'K','\0', 'M', 'N','\0',    // 79 
			     '\0','\0', 'R', 'S', 'T','\0','\0', 'W', 'X', 'Y',    // 89 
			     '\0','\0','\0','\0','\0','\0','\0', 'A','\0', 'C',    // 99 
			     '\0','\0','\0', 'G', 'H','\0','\0', 'K','\0', 'M',    // 109
			     'N', '\0','\0','\0', 'R', 'S', 'T','\0','\0','\0',    // 119
			     'X', '\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 129
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 139
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 149
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 159
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 169
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 179
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 189
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 199
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 209
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 219
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 229
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 239
			     '\0','\0','\0','\0',   0,   1,   2,   3,   0,   1,    // 249
			        2,   3,   0,   1,   2,   3};                       // 255


static char nuc_char[256] = {'A', 'C', 'G', 'T', 'N', 'R', 'Y', 'W', 'S', 'M',     // 9	
			     'K', 'H', 'B', 'V', 'D', 'X', '\0','\0','\0','\0',    // 19	
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 29 
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 39 
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 49 
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 59 
			     '\0','\0','\0','\0','\0', 'A','\0', 'C','\0','\0',    // 69 
			     '\0', 'G', 'H','\0','\0', 'K','\0', 'M', 'N','\0',    // 79 
			     '\0','\0', 'R', 'S', 'T','\0','\0', 'W','\0', 'Y',    // 89 
			     '\0','\0','\0','\0','\0','\0','\0', 'a','\0', 'c',    // 99 
			     '\0','\0','\0', 'g', 'h','\0','\0', 'k','\0', 'm',    // 109
			     'n', '\0','\0','\0', 'r', 's', 't','\0','\0','\0',    // 119
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 129
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 139
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 149
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 159
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 169
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 179
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 189
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 199
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 209
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 219
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 229
			     '\0','\0','\0','\0','\0','\0','\0','\0','\0','\0',    // 239
			     '\0','\0','\0','\0', 'a', 'c', 'g', 't', 'a', 'c',    // 249 different masking...
			     'g', 't','a','c','g','t'};                            // 255


#define nucToIndex unmasked_nuc_index

static char unmasked_nuc_index[256] = {
  0,1,2,3,4,4,4,4,4,4,   // 0 9
  4,4,4,4,4,4,4,4,4,4,   // 10 19
  4,4,4,4,4,4,4,4,4,4,   // 20 29
  4,4,4,4,4,4,4,4,4,4,   // 30 39
  4,4,4,4,4,4,4,4,4,4,   // 40 49
  4,4,4,4,4,4,4,4,4,4,   // 50 59
  4,4,4,4,4,0,4,1,4,4,   // 60 69 65='A' 67='C'
  4,2,4,4,4,4,4,4,4,4,   // 70 79 71='G'
  4,4,4,4,3,4,4,4,4,4,   // 80 89 84='T'
  4,4,4,4,4,4,4,0,4,1,   // 90 99 
  4,4,4,2,4,4,4,4,4,4,   // 100 109
  4,4,4,4,4,4,3,4,4,4,  // 110 119
  4,4,4,4,4,4,4,4,4,4,   // 120 129
  4,4,4,4,4,4,4,4,4,4,   // 130 139
  4,4,4,4,4,4,4,4,4,4,   // 140 149
  4,4,4,4,4,4,4,4,4,4,   // 150 159
  4,4,4,4,4,4,4,4,4,4,   // 160 169
  4,4,4,4,4,4,4,4,4,4,   // 170 179
  4,4,4,4,4,4,4,4,4,4,   // 180 189
  4,4,4,4,4,4,4,4,4,4,   // 190 199
  4,4,4,4,4,4,4,4,4,4,   // 200 209
  4,4,4,4,4,4,4,4,4,4,   // 210 219
  4,4,4,4,4,4,4,4,4,4,   // 220 229
  4,4,4,4,4,4,4,4,4,4,   // 230 239
  4,4,4,4,0,1,2,3,0,1,   // 240 249
  2,3,0,1,2,3 };   // 250 255

static char numeric_nuc_index[256] = {
  0,1,2,3,4,4,4,4,4,4,   // 0 9
  4,4,4,4,4,4,4,4,4,4,   // 10 19
  4,4,4,4,4,4,4,4,4,4,   // 20 29
  4,4,4,4,4,4,4,4,4,4,   // 30 39
  4,4,4,4,4,4,4,4,4,4,   // 40 49
  4,4,4,4,4,4,4,4,4,4,   // 50 59
  4,4,4,4,4,0,4,1,4,4,   // 60 69
  4,2,4,4,4,4,4,4,4,4,   // 70 79
  4,4,4,4,3,4,4,4,4,4,   // 80 89
  4,4,4,4,4,4,4,-4,4,-3, // 90 99
  4,4,4,-2,4,4,4,4,4,4,  // 100 109
  4,4,4,4,4,4,-1,4,4,4,  // 110 119
  4,4,4,4,4,4,4,4,4,4,   // 120 129
  4,4,4,4,4,4,4,4,4,4,   // 130 139
  4,4,4,4,4,4,4,4,4,4,   // 140 149
  4,4,4,4,4,4,4,4,4,4,   // 150 159
  4,4,4,4,4,4,4,4,4,4,   // 160 169
  4,4,4,4,4,4,4,4,4,4,   // 170 179
  4,4,4,4,4,4,4,4,4,4,   // 180 189
  4,4,4,4,4,4,4,4,4,4,   // 190 199
  4,4,4,4,4,4,4,4,4,4,   // 200 209
  4,4,4,4,4,4,4,4,4,4,   // 210 219
  4,4,4,4,4,4,4,4,4,4,   // 220 229
  4,4,4,4,4,4,4,4,4,4,   // 230 239
  4,4,4,4,-12,-11,-10,-9,-8,-7,   // 240 249
  -6,-5,-4,-3,-2,-1 };   // 250 255


void CountACTG(DNASequence &seq, ssize_t &a, ssize_t &c, ssize_t &t, ssize_t &g);
ssize_t CountRepeatMasked(DNASequence &seq);
void MakeRC(char* src, ssize_t len, unsigned char* &rev);
void MakeRC(DNASequence &src, DNASequence &dest);
char RC(ssize_t nuc);
char NucRC(char nuc);
char RandomNuc();
void AppendReverseComplements(std::vector<SimpleSequence> &sequences);
void PrintSimpleSequences(std::vector<SimpleSequence> &sequences, std::string &outFileName);
void PrintDNASequences(DNASequenceList &sequences, std::string &outFileName);
template<typename T>
_SZT_ GetSeqListMemoryUsage(std::vector<T> &sequences) {
  _SZT_ totalMem;
  totalMem = sizeof(T) * sequences.size();
  _SZT_ i;
  for (i = 0; i < sequences.size(); i++ ){
    totalMem += sequences[i].length;
  }
  return totalMem;
}

ssize_t IsUnmasked(unsigned char ch);
char MutateNuc(char c);

#endif
