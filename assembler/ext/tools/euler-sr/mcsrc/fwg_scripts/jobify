#!/usr/bin/env perl

if (@ARGV < 1) {
  print "usage: jobify job_file njobs [-base base] [-nproc nproc] [preamble] [postamble]\n";
  print "job_file has one command per line. base is base name of cmdfile \n";
  print "optional arguments must be in order\n";
  exit(0);
}

$infile = shift @ARGV;
if ($#ARGV >= 0) {
  $ncmds  = shift @ARGV;
}
else {
  $ncmds = `wc -l $infile`;
  chomp $ncmds;
}
if ($infile =~ /\./) {
		$infile =~ /^(.*)\.[^\.]+$/;
		$base = $1;
}
else {
		$base = $infile;
}

$preamble = "";
$postamble = "";
$njobs = 2;
$nproc = 2;
while ($#ARGV >= 0) {
  $opt = shift @ARGV;
  if ($opt eq "-nproc") {
    $nproc = shift @ARGV;
  }
  elsif ($opt eq "-base") {
    $base = shift @ARGV;
  }
  elsif ($opt eq "-preamble") {
    $preamble = shift @ARGV;
  }
  elsif ($opt eq "-postamble") {
    $postamble = shift @ARGV;
  }
}


if($#ARGV >= 0)  {
 $nproc = shift @ARGV;
}
open (IN, "$infile") or die "cannot open $infile\n";

$jobno = 0;

@jobs = <IN>;
chomp @jobs;
$cwd = $ENV{'PWD'};

@jobbin = ();
if ($ncmds > $#jobs) {
 $ncmds = $#jobs;
}
for $i (0 .. $ncmds-1) {
 $jobbin[$i] = ();
}
$jobind = 0;
$bin = 0;
for  $jobind (0 .. $#jobs) {
 if ($bin >= $ncmds) {
  $bin = 0;
 }
 push @{$jobbin[$bin]}, @jobs[$jobind];
 $bin++;
}
$bin = 0;
if ($preamble ne "") {
  print "using preamble: $preamble\n";
}
for $jobno(0 .. $ncmds) {
  $cshOutname = $base . ".".  $jobno . ".csh";
  $outname= $base . "." . $jobno . ".pl";
  open (CSHOUT, ">$cshOutname");
  print CSHOUT "#!/bin/csh\n";
  if ($preamble ne "") {
    print CSHOUT "$preamble\n";
  }
  print CSHOUT "perl $cwd/$outname \n";
  if ($postamble ne  "") {
    print CSHOUT "$postamble\n";
  }
  close CSHOUT; 
  open (OUT, ">$outname");
  print OUT "#!/usr/bin/env perl\n";
  print OUT "\@jobs = \(\)\;\n";
  for $job (@{$jobbin[$jobno]}) {
    print OUT "push \@jobs, \"$job\";\n";
  }
  print OUT "\$nproc = $nproc;\n";
  print OUT "\$numRunning = 0;\n";
  close OUT;
  `cat  $ENV{"HOME"}/projects/mcsrc/fwg_scripts/runjobs.pl >> $outname`;
  `chmod +x $outname`;
  $jobno++;
}

