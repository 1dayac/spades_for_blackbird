ASSEMBLER
24 Aug 2011

De novo sequence assembler for short mate paired reads (70+ bp).

=== Download ===

Our project is situated on: git@github.com:ablab/algorithmic-biology.git
For more actual information please visit http://bioinf.spbau.ru/wiki/Main_Page

=== Libraries ===

We need the following programs and libraries (can be installed from repositories):

* gcc 4.4 or more
* cmake 2.6 or more
* log4cxx
* zlib
* cute
* boost 1.42 (exactly!) 

=== Preparation ===

1. Install all mentioned above.
2. In assembler: run prepare_cfg.sh (this script will build and install libraries from ext (if necessary) and prepare debug and release build files). 

Note: if you do not have sudo account, you should install libraries in build/ext. For this run:

./prepare_cfg.sh nosys 
 
=== Project structure ===

Our project structure is the following. In the algorithmic-biology/assembler/ there are directories:

* src - contains all the code written inside laboratory:
    o subprojects (e.g. debruijn, abruijn, etc);
    o common code in directory include that is used by all subprojects (e.g. io, sequence, cuckoo.hpp, etc);
    o tools (various utils). 
* ext - contains all the external code that we use:
    o src - code of some necessary libraries that are impossible to get from apt-get;
    o include - headers (e.g. kseq);
    o tools - any external tools that we use. 
* doc - contains documentation.
* data - contains links to data (which is not actually stored under git).
* build - contains all executables. 

=== CMake ===

We use cmake as a build system.

There are 2 types of executables: debug and release. Debug is not optimized and can easily be used for debug, and release is optimized and can't be debugged.

If you work under Eclipse just prepare your system. For each project there are 2 build configurations (debug and release) and 2 run configurations.

If you work under console you should also prepare you system. To build a project run make in appropriate directory:

build/<debug|release>/<project name>

To run: build/<debug|release>/<project name>/<project name>

=== Coding conventions ===

We're using Google C++ Style Guide http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml 

=== Troubleshooting ===

If you do not have sudo account you should install all the necessary libraries somewhere in your home directory. In this case CMake will not be able to find them. You should use ccmake to solve this problem (it can be found in cmake-curses-gui package).

Run ccmake . in the directory where CMakeLists.txt are (e.g. build/debug/ or build/release/). Press t to see all the options. Now you can manually correct the paths to libraries and their headers. 