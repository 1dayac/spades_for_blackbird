include: "Common.snake"

import yaml

BINS, = glob_wildcards("binning/{{bin,{}}}.info".format(NAME_TEMPLATE))
if not BINS:
    raise WorkflowError("No bins detected!")

rule reassemble_all:
    input:   expand("reassembly/bins/{bin}.fasta", bin=BINS)
    message: "Reassembly finished."

rule reassembly_config:
    input:   "binning/{bin}.info"
    output:  "reassembly/{bin}.yaml"
    message: "Generated config file for reassembly of {wildcards.bin}"
    run:
        with open(output[0], "w") as outfile:
            conf = {"k": SMALL_K, "sample_cnt": SAMPLE_COUNT,
                    "kmer_mult": "profile/mts/kmers",
                    "bin": wildcards.bin, "bin_prof": "binning/{}/bins.prof".format(BINNER),
                    "edges_sqn": "reassembly/{}_edges.fasta".format(wildcards.bin),
                    "edges_mpl": "reassembly/{}_edges.mpl".format(wildcards.bin),
                    "edge_fragments_mpl": "reassembly/{}_edges_frag.mpl".format(wildcards.bin),
                    "frag_size": SPLIT_LENGTH, "min_len": 100}
            yaml.dump(conf, outfile)

rule combine_reads:
    output:  "binning/{bin}/left.fastq", "binning/{bin}/right.fastq"
    message: "Combine read fragments for {wildcards.bin}"
    shell:   "cat binning/{wildcards.bin}/sample*_1.fastq > binning/{wildcards.bin}/left.fastq\n"
             "cat binning/{wildcards.bin}/sample*_2.fastq > binning/{wildcards.bin}/right.fastq\n"

rule reassemble:
    input:   left="binning/{bin}/left.fastq", right="binning/{bin}/right.fastq",
             config="reassembly/{bin}.yaml"
    output:  "reassembly/bins/{bin}.fasta"
    params:  "reassembly/{bin}"
    log:     "reassembly/{bin}.log"
    threads: THREADS
    message: "Reassembling reads for {wildcards.bin}"
    shell:   "{REASSEMBLER_DIR}/spades.py --only-assembler -t {threads}"
             " --pe1-1 {input.left} --pe1-2 {input.right} --pe1-ff"
             " -o {params} --series-analysis {input.config} >{log} 2>&1 && "
             "cp {params}/scaffolds.fasta {output}"
