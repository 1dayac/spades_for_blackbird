configfile: "config.yaml"

IN = config["IN"]
SPADES = config["SPADES"]
BIN = config["BIN"]
SCRIPTS = config["SCRIPTS"]
SOFT = config["SOFT"]
QUAST = config["QUAST"]
REF = config["REF"]
K = int(config["K"])
Kp = K + 1
CONFIG = "K{0}/configs/config.info".format(K)
#expand("K{k}/configs/config.info", k=K)
SAVES = "K{0}/saves/07_before_repeat_resolution/graph_pack".format(K)
#expand("K{k}/saves/07_before_repeat_resolution/graph_pack", k=K)
MIN_CONTIG_LENGTH = int(config["MIN_CONTIG_LENGTH"])
CAG = config.get("CAG")

SAMPLES, = glob_wildcards(IN + "/{sample,sample\d+}")
SAMPLE_COUNT = len(SAMPLES)

rule all:
    input:   expand("binning/{sample}.bin", sample=SAMPLES)
    message: "Running MTS"

rule assemble:
    input:   left = IN + "/{sample}/left.fastq", right = IN + "/{sample}/right.fastq"
    output:  "{sample}.fasta"
    params:  "{sample}_assembly"
    message: "Assembling {wildcards.sample} with SPAdes"
    shell:
        "{SPADES}/spades.py -k {K} --only-assembler --meta -t {threads} -1 {input.left} -2 {input.right} -o {params} && "
        "cp {params}/scaffolds.fasta {output}"

rule descriptions:
    output:  expand("{sample}.desc", sample=SAMPLES)
    message: "Generating sample descriptions"
    shell:   "{SCRIPTS}/dataset_desc_gen.sh {IN}/sample ./"

rule multiplicities:
    input:   expand("{sample}.desc", sample=SAMPLES)
    output:  "kmers.mpl"
    message: "Gathering {Kp}-mer multiplicities from {input}"
    shell:
        "export PATH={SOFT}:$PATH && "
        "{BIN}/kmer_multiplicity_counter -k {Kp} -o kmers --mult 2 --sample 3 {input}"

rule coverage:
    input:   contigs="{sample}.fasta", mpl="kmers.mpl"
    output:  "{sample}.id"
    message: "Counting contig abundancies for {wildcards.sample}"
    shell:
        "{BIN}/contig_abundance_counter {K} {wildcards.sample}_assembly/{SAVES} {input.contigs} {SAMPLE_COUNT} kmers {wildcards.sample} {MIN_CONTIG_LENGTH}"

rule canopy_pre:
    input:   expand("{sample}.id", sample=SAMPLES)
    output:  "canopy.in"
    message: "Preparing canopy input"
    shell:   "{SCRIPTS}/make_canopy_input.py {output} {input}"

rule canopy:
    input:   rules.canopy_pre.output
    output:  out = "canopy.out", prof = "canopy.prof"
    message: "Running canopy clustering"
    shell:   "{SCRIPTS}/canopy_launch.sh {input} {output.out} {output.prof}"

rule canopy_post:
    input:   rules.canopy.output.out
    output:  expand("{sample}.ann", sample=SAMPLES)
    message: "Preparing raw annotations"
    shell:   "python2 {SCRIPTS}/parse_canopy_out.py {input} ./"

rule propagate:
    input:   "{sample}.fasta", "{sample}.ann"
    output:  "{sample}.ann.prop"
    message: "Propagating annotations for {wildcards.sample}"
    shell:   "{BIN}/annotation_propagator {K} {wildcards.sample}_assembly/{CONFIG} {wildcards.sample}_assembly/{SAVES} {input} {output}"

rule binning:
    input:
        "{sample}.fasta", "{sample}.ann",
        IN + "/{sample}/left.fastq", IN + "/{sample}/right.fastq"
    output:  "binning/{sample}.bin"
    params:  "binning", "{sample}"
    message: "Propagating annotation & binning reads for {wildcards.sample}"
    #TODO: non-file output?
    shell:
        "{BIN}/prop_binning {K} {wildcards.sample}_assembly/{CONFIG} {wildcards.sample}_assembly/{SAVES} {input} {params} &&"
        "touch {output}"

rule reassemble:
    input:   "binning/{sample}.bin"
    output:  "{sample}_{cag}.fasta"
    log:     "{sample}_reassembly"
    params:  left="binning/{cag}/{sample}_1.fastq", right="binning/{cag}/{sample}_2.fastq"
    message: "Reassembling reads for {wildcards.cag} from {wildcards.sample}"
    shell:
        "{SPADES}/spades.py -k {K} --only-assembler --meta -t {threads} -1 {params.left} -2 {params.right} -o {log} && "
        "cp {log}/scaffolds.fasta {output}"

#Todo: report error when CAG is unset
rule reassemble_all:
    input:   expand("{sample}_{cag}.fasta", sample=SAMPLES, cag=CAG)
    message: "Reassembling reads for {CAG}"

rule quast:
    input:   "{sample}.fasta"
    output:  "{sample}.cont"
    params:  "{sample}_q/contigs_reports/nucmer_output/{sample}.coords.filtered", "{sample}", 70
    message: "Aligning reference for {wildcards.sample} & looking for interesting contigs"
    shell:
        "{QUAST} -R {REF} {input} -o {wildcards.sample}_q &&"
        "{SCRIPTS}/filter_nucmer.py {params} > {output}"

rule pca:
    input:   "canopy.in", "canopy.out", "{sample}.cont"
    output:  "{sample}.png"
    message: "Doing some visualization"
    shell:
        "Rscript {SCRIPTS}/pca.R {input} {output}"

rule stats_all:
    input:   expand("{sample}.png", sample=SAMPLES)
    message: "Running stats"
